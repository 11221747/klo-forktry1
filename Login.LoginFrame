package view.login;
import controller.GameController;
import model.MapModel;
import view.FrameUtil;
import view.game.GameFrame;
import User.UserStorage;
import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

import User.User;

public class LoginFrame extends JFrame {
    private JTextField username;
    private JTextField password;
    private JButton SubmitBtn;
    private JButton GuestBtn;
    private JButton RegisterBtn;
    private String filePath;
    private GameFrame gameFrame;
/// //////构造方法
    public LoginFrame(int width, int height) {
        this.setTitle("Login Frame");
        this.setLayout(null);
        this.setSize(width, height);
        this.setDefaultCloseOperation(3);//
        JLabel userLabel = FrameUtil.createJLabel(this, new Point(50, 20), 70, 40, "username:");
        JLabel passLabel = FrameUtil.createJLabel(this, new Point(50, 80), 70, 40, "password:");

        ///////// FrameUtil.createJTextField
        username = FrameUtil.createJTextField(this, new Point(120, 20), 120, 40);
        password = FrameUtil.createJTextField(this, new Point(120, 80), 120, 40);

        SubmitBtn = FrameUtil.createButton(this, "Submit", new Point(40, 140), 100, 40);
        GuestBtn = FrameUtil.createButton(this, "Guest", new Point(160, 140), 100, 40);
        RegisterBtn = FrameUtil.createButton(this, "Register", new Point(280, 140), 100, 40);

        /// ///////////用户按下submit， 先check 账户密码，再从文件夹内找出用户上次记录，记录为空则为初始棋盘
        /// //////新用户，未储存到文件夹里面
        RegisterBtn.addActionListener(e -> {
            System.out.println("Username = " + username.getText());
            System.out.println("Password = " + password.getText());
          /// ///////获取注册用户密码，储存文件
            try {
                UserStorage.registerUser(username.getText(),password.getText());//保存注册用户信息
                //给每个用户初始化键盘一样，后面可改难度，
                //储存map
                int[][] map = {
                        {1, 2, 2, 1},
                        {1, 3, 2, 2},
                        {1, 3, 4, 4},
                        {0, 0, 4, 4}
                };
                List<String> gameData =new ArrayList<>();
                StringBuilder sb =new StringBuilder();
                for(int[] line : map){
                    for(int value: line){
                        sb.append(value).append(" ");//加空格！
                    }
                    gameData.add(sb.toString());
                    sb.setLength(0);//清空
                }
                String path= String.format("SaveData/%s",username.getText());
                File dir= new File(path);
                dir.mkdirs();
                try{
                    Files.write(Path.of(path+"/data.txt"),gameData);
                } catch (IOException ex) {
                    throw new RuntimeException(ex);
                }
                /// ////////两个信息都保存了
                JOptionPane.showMessageDialog(null,"注册成功，请重新登录！","成功登录窗口",JOptionPane.INFORMATION_MESSAGE // 消息类型（显示信息图标）
                );
        
            } catch (Exception ex) {
                throw new RuntimeException(ex);
            }

        });

/// //////////////////老用户，读文件
        SubmitBtn.addActionListener(e -> {
            System.out.println("Username = " + username.getText());
            System.out.println("Password = " + password.getText());
            /// ////////todo: check login information
            try {
                if (UserStorage.login(username.getText(),password.getText())){
                    User u = new User(username.getText(),password.getText());
                    int [][] map = u.loadGame();
                    MapModel mapModel =new MapModel(map);
                    GameFrame gameFrame = new GameFrame(600, 450,mapModel);
                    this.setVisible(false);
                }
            }
            catch (IOException ex) {
                throw new RuntimeException("登录不成功：用户名或密码错误！");
            }

        });


/// //////////访客按钮直接触发事件，开始游戏
        GuestBtn.addActionListener(e -> {
            username.setText("");
            password.setText("");
            MapModel mapModel = new MapModel(new int[][]{
                    {1, 2, 2, 1},
                    {1, 3, 2, 2},
                    {1, 3, 4, 4},
                    {0, 0, 4, 4}
            });
            GameFrame gameFrame = new GameFrame(600, 450, mapModel);
            gameFrame.setVisible(true);
            this.setVisible(false);
        });

        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    }


//    public void setGameFrame(GameFrame gameFrame) {
//        this.gameFrame = gameFrame;
//    }
}
